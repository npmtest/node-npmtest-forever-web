{"/home/travis/build/npmtest/node-npmtest-forever-web/test.js":"/* istanbul instrument in package npmtest_forever_web */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-web/lib.npmtest_forever_web.js":"/* istanbul instrument in package npmtest_forever_web */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_forever_web = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_forever_web = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-web/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-forever-web && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_forever_web */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_forever_web\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_forever_web.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_forever_web.rollup.js'] =\n            local.assetsDict['/assets.npmtest_forever_web.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_forever_web.__dirname + '/lib.npmtest_forever_web.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/bin/fw":"#!/usr/bin/env node\n\nvar commander = require('commander'),\n    path      = p = require('path'),\n    chalk     = require('chalk'),\n    _         = require('lodash'),\n    pkg       = require('../package.json'),\n    Monitor       = require('../lib/mon'),\n    interface = require('../web/index');\n\ncommander.version(pkg.version, '-v, --version')\n  .usage('[cmd] [options]');\n\ncommander.on('--help', function(){\n  console.log('  Basic Examples:\\n\\n' +\n    '    Start the web server, by default port (8088):\\n' +\n    chalk.grey('    $ fw start\\n') +\n    '\\n' +\n    '    Start the web server, by specific port (8090):\\n' +\n    chalk.grey('    $ fw start 8090\\n')\n  );\n});\ncommander.on('-c', function(){\n  console.log(arguments);\n})\n\n\n// Web interface\ncommander.command('start [port]')\n  .option('--no-debug', 'hide stdout/stderr information')\n  .description('Launch the web server, port default by 8088')\n  .action(function(port, cmd){\n    interface(port, cmd.debug);\n  });\n\n// Configuration\nvar acceptKeys = ['forever', 'refresh', 'manipulation'];\nfunction showConfigs(cmd, mon){\n  if(!mon){\n    mon =  Monitor();\n  }\n  var storage = mon._config.store, prints = '';\n  for(var k in storage){\n    prints += chalk.bold(k + ': ') + '\\t' + chalk.blue(storage[k] + '\\n');\n  }\n  console.log(prints);\n}\n\ncommander.command('config')\n  .description('show all configs')\n  .action(showConfigs);\n\ncommander.command('set <key> <value>')\n  .description('set config by key-value pairs')\n  .action(function(key, value, cmd){\n    if(!~acceptKeys.indexOf(key)){\n      return console.log('key could only be one of below:', acceptKeys.map(function(m){ return '\\n' + chalk.magenta(m)}).join(''));\n    }\n    var mon = Monitor();\n    mon.config(key, value);\n    showConfigs(cmd, mon);\n  });\n\ncommander.command('rm <key>')\n  .description('remove config by key')\n  .action(function(key, cmd){\n    var mon = Monitor();\n    mon.config(key, null);\n    showConfigs(cmd, mon);\n  });\n\ncommander.parse(process.argv);\n\nif (process.argv.length == 2) {\n  commander.outputHelp();\n  process.exit(0);\n}","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/lib/mon.js":"var fs       = require('fs'),\n    path     = require('path'),\n    nconf    = require('nconf'),\n    Debug    = require('./util/debug'),\n    stat     = require('./stat'),\n    chokidar = require('chokidar'),\n    _        = require('lodash'),\n    ansiHTML = require('ansi-html'),\n    chalk    = require('chalk'),\n    pm       = require('./pm');\n\nmodule.exports = Monitor;\n\n/**\n * Monitor of project monitor web.\n * @param options\n * @returns {Monitor}\n * @constructor\n */\nfunction Monitor(options){\n  if (!(this instanceof Monitor)) {\n    return new Monitor(options);\n  }\n\n  // Initialize...\n  this._init(options);\n};\n\n/**\n * Initialize options and configurations.\n * @private\n */\nMonitor.prototype._init = function(options){\n  options = options || {};\n  // bind default options.\n  _.defaults(options, {\n    refresh     : 5000,\n    manipulation: true\n  });\n\n  // Get root directory of forever.\n  var foreverRoot = process.env.FOREVER_ROOT || path.join(process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'], '.forever');\n\n  // Make sure exist\n  if (!fs.existsSync(foreverRoot)) {\n    throw new Error('Forever root can not be located, try to set env by `export FOREVER_ROOT=[ROOT]`.');\n  }\n\n  options.foreverRoot = foreverRoot;\n\n  // Bind socket.io server to context.\n  if (options.sockio) {\n    this._sockio = options.sockio;\n    delete options.sockio;\n  }\n\n  // Bind to context.\n  this.options = options;\n  Object.freeze(this.options);\n\n  // Initialize configurations.\n  this._config = new nconf.File({file: path.resolve(this.options.foreverRoot, 'forever-web.json')});\n\n  // Set configurations\n  this.config('forever', this._config.get('forever') || this.options.forever || this.options.foreverRoot);\n  this.config('refresh', this._config.get('refresh') || this.options.refresh);\n  this.config('manipulation', this._config.get('manipulation') || this.options.manipulation || true);\n\n  // Loger\n  this._log = Debug({\n    namespace: 'monitor-web',\n    debug    : !!this.options.debug\n  });\n};\n\n/**\n * Operations of configuration.\n * @example:\n *    set config    : mon.config('key', 'value');\n *    clear config  : mon.config('key', null);\n *    get config    : mon.config('key');\n * @param {String} key\n * @param {Mixed} value\n * @returns {*}\n */\nMonitor.prototype.config = function(key, value){\n  if (!key) {\n    return;\n  }\n  // Load config from File.\n  this._config.loadSync();\n\n  if (typeof value == 'undefined') {\n    // Get config.\n    return this._config.get(key);\n  } else if (value == null) {\n    // Clear config.\n    this._config.clear(key);\n    // Reset to default if necessary.\n    if (key == 'refresh') {\n      value = 5000;\n    } else if (key == 'manipulation') {\n      value = true;\n    }\n    value && this._config.set(key, value);\n    return this._config.saveSync();\n  }\n\n  // Make sure value in a correct type.\n  if (typeof value != 'boolean') {\n    if (!isNaN(value)) {\n      value = parseFloat(value);\n    } else if (/^(true|false)$/.test(value)) {\n      value = (value == 'true');\n    }\n  }\n  this._config.set(key, value);\n  // Save it.\n  this._config.saveSync();\n};\n\n/**\n * Run socket.io server.\n */\nMonitor.prototype.run = function(){\n  if (!this._sockio) {\n    return;\n  }\n  this._noClient = true;\n\n  this._beats = {};\n  // Watch `sock` directory\n  this._watchSocks();\n\n  // Listen connection event.\n  this._sockio.on('connection', this._connectSock.bind(this));\n}\n\n/**\n * Connection event.\n * @param {Socket} socket\n * @private\n */\nMonitor.prototype._connectSock = function(socket){\n  // Still has one client connects to server at least.\n  this._noClient = false;\n  socket.on('disconnect', function(){\n    // Check connecting client.\n    this._noClient = _.size(this._sockio.sockets.connected) <= 0;\n  }.bind(this));\n\n  // Tail logs\n  socket.on('tail_beat', this._tailLogs.bind(this, socket));\n  socket.on('tail_destroy', this._checkTailBeat.bind(this, socket.id))\n\n  // Trigger actions of process.\n  socket.on('action', function(action, id){\n    pm.action(path.join(this.config('forever'), 'sock'), action, id, function(err, data){\n      if (err) {\n        this._log.e(action, err.message);\n        return socket.emit('action', id, err.message);\n      }\n    }.bind(this));\n  }.bind(this));\n\n  // If processes have been fetched, emit the last to current client.\n  this._procs && socket.emit(typeof this._procs == 'string' ? 'info' : 'procs', this._procs);\n  // If sysStat have been fetched, emit the last to current client.\n  this._sysStat && this._broadcast('system_stat', this._sysStat);\n\n  // Grep system states once and again.\n  (this._status != 'R') && this._nextTick(this.config('refresh') || 5000);\n}\n\n/**\n * Show logs by uid.\n * @param {socket.io} socket\n * @param {String} uid\n * @private\n */\nMonitor.prototype._tailLogs = function(socket, uid){\n  var beat;\n  if ((beat = this._beats[uid])) {\n    (!beat.sockets[socket.id]) && (beat.sockets[socket.id] = socket);\n    beat.tick = Date.now();\n    this._beats[uid] = beat;\n    return;\n  }\n\n  this._log.i('tail', uid);\n\n  this._beats[uid] = {\n    tick   : Date.now(),\n    sockets: {}\n  };\n  this._beats[uid].sockets[socket.id] = socket;\n\n  var sockPath = path.join(this.config('forever'), 'sock');\n\n  function broadcast(data){\n    var beat = this._beats[uid];\n    if (!beat) {\n      this._log.e('beat does not exist.');\n      return;\n    }\n    for (var key in beat.sockets) {\n      beat.sockets[key].emit('tail', data)\n    }\n  }\n\n  function emitError(err){\n    broadcast.call(this, {\n      uid: uid,\n      msg: '<span style=\"color: #ff0000\">Error: ' + err.message + '</span>'\n    });\n  }\n\n  // Verify directory exist or not.\n  if (!fs.existsSync(sockPath)) {\n    emitError.call(this, 'The socket directory does not exist, it is due to locate forever root failed, try to set it by `$ fw set forever [ROOT]`');\n  }\n\n  pm.tail(sockPath, uid, function(err, lines){\n    if (err) {\n      return emitError.call(this, err);\n    }\n    // Emit tail to clients.\n    broadcast.call(this, {\n      uid: uid,\n      msg: lines.map(function(line){\n        line = line.replace(/\\s/, '&nbsp;');\n        return '<span>' + ansiHTML(line) + '</span>';\n      }).join('')\n    });\n  }.bind(this), function(err, tail){\n    if (err) {\n      return emitError.call(this, err);\n    }\n\n    this._log.d(chalk.magenta('tail'), 'tailing...');\n    this._beats[uid].tail = tail;\n    this._checkTailBeat();\n  }.bind(this));\n};\n\n/**\n * Check beats.\n * @returns {number}\n * @private\n */\nMonitor.prototype._checkTailBeat = function(socketId, uid){\n  this._beatTimer && clearTimeout(this._beatTimer);\n  this._beatTimer = null;\n\n  function destroyTail(beat, key){\n    beat.tail && beat.tail.kill('SIGTERM');\n    this._log.d(chalk.magenta('tail'), chalk.red('destroy'), key);\n    delete this._beats[key];\n  }\n\n  if (socketId && uid) {\n    this._log.i('tail', chalk.red('destroy'), uid, socketId);\n    var beat = this._beats[uid];\n    if (beat && beat.sockets) {\n      delete beat.sockets[socketId];\n    }\n    if (Object.keys(beat.sockets).length == 0) {\n      destroyTail.call(this, beat, uid);\n    }\n  } else {\n    for (var key in this._beats) {\n      var beat = this._beats[key];\n      // Kill timeout beats.\n      if (Date.now() - beat.tick > 4000) {\n        destroyTail.call(this, beat, key);\n      }\n    }\n  }\n  // Loop\n  if (Object.keys(this._beats).length > 0) {\n    this._log.d(chalk.magenta('tail'), 4000);\n    this._beatTimer = setTimeout(this._checkTailBeat.bind(this), 4000);\n  }\n};\n\n/**\n * Grep system state loop\n * @param {Number} tick\n * @private\n */\nMonitor.prototype._nextTick = function(tick, continuously){\n  // Return it if worker is running.\n  if (this._status == 'R' && !continuously) {\n    return;\n  }\n  // Running\n  this._status = 'R';\n  this._log.d(chalk.magenta('monitor'), tick);\n  // Grep system state\n  this._systemStat(function(){\n    // If there still has any client, grep again after `tick` ms.\n    if (!this._noClient) {\n      return setTimeout(this._nextTick.bind(this, tick, true), tick);\n    }\n    // Stop\n    delete this._status;\n    this._log.d(chalk.magenta('monitor'), chalk.red('destroy'));\n  }.bind(this));\n}\n\n/**\n * Grep system states.\n * @param {Function} cb\n * @private\n */\nMonitor.prototype._systemStat = function(cb){\n  stat.cpuUsage(function(err, cpu_usage){\n    if (err) {\n      // Log only.\n      this._log.e('sockio', 'Can not load system/cpu/memory information: ' + err.message);\n    } else {\n      // System states.\n      this._sysStat = _.defaults(_(stat).pick('cpus', 'arch', 'hostname', 'platform', 'release', 'uptime', 'memory').clone(), {\n        cpu: cpu_usage\n      });\n      this._broadcast('system_stat', this._sysStat);\n    }\n    cb();\n  }.bind(this));\n}\n\n/**\n * Watch `sock` directory.\n * @private\n */\nMonitor.prototype._watchSocks = function(){\n  var root = this.config('forever'),\n      pidPath = path.join(root, 'pids'),\n      sockPath = path.join(root, 'sock');\n\n  // Verify directory exist or not.\n  if (!fs.existsSync(sockPath) || !fs.existsSync(pidPath)) {\n    this._procs = 'The socket directory does not exist, it is due to locate forever root failed, try to set it by `$ fw set forever [ROOT]`';\n    return this._broadcast('info', this._procs);\n  }\n\n  this._log.i('chokidar', 'watching', pidPath);\n\n  // Chokidar doesn't watch the `0 byte size` file at all, so we try to watch `pids` directory.\n  // And if there has any changes, try to get sockets from `sock`.\n  chokidar.watch(pidPath, {\n    ignored   : false,\n    persistent: true\n  }).on('all', function(e, p){\n    this._log.i('chokidar', e, p);\n\n    // Avoid refresh bomb.\n    if (this._throttle) {\n      clearTimeout(this._throttle);\n    }\n    this._throttle = setTimeout(function(ctx){\n      ctx._throttle = null;\n      ctx._refreshProcs(sockPath);\n    }, 500, this);\n  }.bind(this));\n};\n\n/**\n * Refresh processes\n * @private\n */\nMonitor.prototype._refreshProcs = function(sockPath){\n  pm.list(sockPath, function(err, procs){\n    if (err) {\n      return this._broadcast('info', 'Error: ' + err.message);\n    }\n\n    // Emit to client\n    this._broadcast('procs', this._procs = procs);\n  }.bind(this))\n};\n\n/**\n * Broadcast to all connected clients.\n * @param event\n * @param data\n * @private\n */\nMonitor.prototype._broadcast = function(event, data){\n  this._sockio.sockets.emit(event, data);\n};","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/lib/util/debug.js":"var chalk = require('chalk'),\n  _ = require('lodash');\n\nmodule.exports = Debug;\n\n/**\n * Simple debug tool.\n * @param {Object} options\n * @returns {Debug}\n * @constructor\n */\nfunction Debug(options) {\n  if (!(this instanceof Debug)) {\n    return new Debug(options);\n  }\n  if (typeof options == 'string') {\n    options = {\n      namespace: options\n    };\n  }\n  this.options = _.defaults(options || {}, {\n    namespace: 'forever-web',\n    timestamp: true,\n    debug: false\n  });\n}\nDebug.prototype._l = function (level, args) {\n  if(!this.options.debug){\n    return;\n  }\n  args = _.values(args);\n\n  var prints = [chalk.bgBlack.grey(this.options.namespace)];\n  var prefix, color;\n  switch (level) {\n    case 'e':\n      prefix = 'ERR!', color = 'red';\n      break;\n    case 'w':\n      prefix = 'warn', color = 'yellow';\n      break;\n    case 'd':\n      if(this.options.timestamp){\n        prints.push(chalk.underline.dim((new Date()).toISOString()))\n      }\n      break;\n    default :\n      prefix = args.splice(0, 1), color = 'green';\n      break;\n  }\n  if(prefix && color){\n    prints.splice(2, 0, chalk.bgBlack[color](prefix));\n  }\n  prints.push(args.join(' '));\n  console.log.apply(null, prints);\n};\n\n/**\n * Loggers: info, error, debug, log, warn.\n */\n['i', 'e', 'd', 'l', 'w'].forEach(function(s){\n  Debug.prototype[s] = function(){\n    this._l.call(this, s, arguments);\n  };\n});","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/lib/stat.js":"var usage     = require('usage'),\n    os        = require('os'),\n    exec      = require('child_process').exec,\n    winCPU    = require('windows-cpu'),\n    isWindows = process.platform == 'win32';\n\n/**\n * System states\n * @type {{hostname: *, platform: *, arch: *, release: *, cpus, uptime, memory}}\n */\nvar stat = module.exports = {\n  /**\n   * Hostname, e.g.: localhost, TjatseMacProBook.local...\n   */\n  hostname: os.hostname(),\n  /**\n   * Platform, e.g.: darwin, win32, linux...\n   */\n  platform: os.platform(),\n  /**\n   * Architecture, e.g.: 64, 32...\n   */\n  arch    : os.arch(),\n  /**\n   * Ver number of system.\n   */\n  release : os.release(),\n  /**\n   * List all CPUs.\n   * @returns {*}\n   */\n  get cpus(){\n    return os.cpus();\n  },\n  /**\n   * Uptime.\n   * @returns {*}\n   */\n  get uptime(){\n    return os.uptime();\n  },\n  /**\n   * System memory usage.\n   * @returns {{free: *, total: *, percentage: number}}\n   */\n  get memory(){\n    return {\n      free      : os.freemem(),\n      total     : os.totalmem(),\n      percentage: Math.round(100 * (1 - os.freemem() / os.totalmem()))\n    }\n  }\n};\n\n/**\n * System CPU usage percentage (total).\n * @param fn\n */\nstat.cpuUsage = function(fn){\n  if (isWindows) {\n    winCPU.totalLoad(function(err, results){\n      fn(err, results.reduce(function(p1, p2){\n        return (p1 + (p2 || p1)) / 2;\n      }).toFixed(2));\n    })\n  } else {\n    setTimeout(function(ctx, stat1){\n      var stat2 = ctx.cpuInfo(),\n          perc = 100 * (1 - (stat2.idle - stat1.idle) / (stat2.total - stat1.total));\n      fn(null, perc.toFixed(2));\n    }, 1000, this, this.cpuInfo());\n  }\n};\n\n/**\n * System CPU usage detail information.\n * @param fn\n * @returns {{idle: number, total: number}}\n */\nstat.cpuInfo = function(fn){\n  var cpus = this.cpus, idle = 0, total = 0;\n  for (var i in cpus) {\n    idle += cpus[i].times.idle;\n    for (var k in cpus[i].times) {\n      total += cpus[i].times[k];\n    }\n  }\n  return {\n    'idle' : idle,\n    'total': total\n  };\n};\n\n/**\n * Get memory usage by process id.\n * @param {String} pid\n * @param {Function} cb\n */\nstat.memoryUsage = function(pid, cb){\n  if (isWindows) {\n    exec('TaskList /fi \"PID eq ' + pid + '\" /fo CSV', function(err, stdout, stderr){\n      if (err) {\n        return cb(err);\n      }\n      var lines = stdout.split('\\n');\n      if (lines != 2) {\n        return cb(null, '0');\n      }\n      var data = lines[1].split(',');\n      cb(data.length == 0 ? '0' : data[data.length - 1].replace(/[\\'\\\",\\s]/g, ''));\n    })\n  } else {\n    usage.lookup(pid, function(err, result){\n      if (err) {\n        return cb(err);\n      }\n      return cb(null, result.memory);\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/lib/pm.js":"var childProcess = require('child_process'),\n    fs           = require('fs'),\n    path         = require('path'),\n    nssock       = require('nssocket'),\n    _            = require('lodash'),\n    async        = require('async'),\n    stat         = require('./stat'),\n    isWindows    = process.env.platform == 'win32';\n\n/**\n * Forever lib.\n * @type {{}}\n */\nvar pm = module.exports = {};\n\n/**\n * List available processes.\n * @param {String} sockPath\n * @param {Function} cb\n * @param {Boolean} ignoreMem\n */\npm.list = function(sockPath, cb, ignoreMem){\n  var socks;\n  try {\n    var getTick = function(sockName){\n      return parseFloat(sockName.slice(sockName.indexOf('.') + 1, sockName.lastIndexOf('.') - 3));\n    };\n    // Read socket paths and sort them by ctime.\n    socks = fs.readdirSync(sockPath).filter(function(sock){\n      return /\\.sock$/.test(sock);\n    }).sort(function(sock1, sock2){\n      return getTick(sock1) - getTick(sock2);\n    });\n    getTick = null;\n  } catch (err) {\n    cb(err);\n  }\n\n  // Query information.\n  async.mapSeries(socks, function(sock, next){\n    var sp = path.join(sockPath, sock);\n    isWindows && (sp = '\\\\\\\\.\\\\pipe\\\\' + sp);\n\n    var socket = new nssock.NsSocket();\n    socket.connect(sp, function(err){\n      if (err) {\n        return next(err);\n      }\n\n      socket.dataOnce(['data'], function(data){\n        data.socket = sp;\n        if(!ignoreMem) {\n          stat.memoryUsage(data.pid, function(err, mem){\n            data.memory = !err && mem ? mem : '0';\n            socket.end();\n            next(null, data);\n          });\n        }else{\n          socket.end();\n          next(null, data);\n        }\n      });\n\n      socket.send(['data']);\n    });\n\n    socket.on('error', function(err){\n      if (err.code === 'ECONNREFUSED') {\n        // Remove dumps.\n        fs.unlink(sp, function(){\n          next();\n        });\n      } else {\n        next();\n      }\n    });\n  }, cb);\n};\n\n/**\n * Find process by uid.\n * @param {String} sockPath\n * @param {String} id\n * @param {Function} cb\n * @private\n */\npm._findById = function(sockPath, id, cb){\n  pm.list(sockPath, function(err, procs){\n    if(err){\n      return cb(err);\n    }\n    if (!procs || procs.length == 0) {\n      return cb(new Error('No forever process running, the sockPath is \"' + sockPath + '\", please make sure it is existing!'));\n    }\n\n    var proc = _.find(procs, function(p){\n      return p && p.uid == id;\n    });\n\n    if (!proc) {\n      return cb(new Error('Can not find forever process by UID: ' + id));\n    }\n\n    cb(null, proc);\n  }, true);\n}\n\n/**\n * Trigger actions of process by uid.\n * @param {String} sockPath\n * @param {String} uid\n * @param {Function} cb\n */\npm.action = function(sockPath, action, uid, cb){\n  pm._findById(sockPath, uid, function(err, proc){\n    if(err){\n      return cb(err);\n    }\n\n    pm._actionByUid(proc, action, cb);\n  })\n};\n\n/**\n * Trigger actions of process by uid.\n * @param {Object} proc\n * @param {Function} cb\n * @private\n */\npm._actionByUid = function(proc, action, cb){\n    var socket = new nssock.NsSocket();\n\n    function onMessage(data) {\n      socket.undata([action, 'ok'],    onMessage);\n      socket.undata([action, 'error'], onMessage);\n      socket.end();\n\n      var message = data && data.message,\n          type    = this.event.pop();\n\n      if (type === 'error' && message && !/is not running/.test(message)) {\n        return cb(new Error(message));\n      }\n      cb(null, data);\n    }\n\n    socket.connect(proc.socket, function (err) {\n      if (err) {\n        return cb(err);\n      }\n\n      socket.dataOnce([action, 'ok'],    onMessage);\n      socket.dataOnce([action, 'error'], onMessage);\n      socket.send([action]);\n    });\n\n    socket.on('error', function (err) {\n      cb(err);\n    });\n};\n\n/**\n * Tail logs.\n * @param {String} sockPath\n * @param {String} uid\n * @param {Function} each Iterator\n * @param {Function} cb\n * @returns {*}\n */\npm.tail = function(sockPath, uid, each, cb){\n  // TODO: PR in demand, Windows doesn't support `tail`.\n  if (isWindows) {\n    return cb(new Error('Logs can not work on Windows.'));\n  }\n  pm._findById(sockPath, uid, function(err, proc){\n    if(err){\n      return cb(err);\n    }\n    // Tail logs.\n    var tail = pm._tailLogs(proc, each);\n    if (tail instanceof Error) {\n      cb(tail);\n    } else {\n      cb(null, tail);\n    }\n  });\n};\n/**\n * Use linux `tail` command to grep logs.\n * @param {Object} proc\n * @param {Function} cb\n * @returns {*}\n * @private\n */\npm._tailLogs = function(proc, cb){\n  if (!fs.existsSync(proc.logFile)) {\n    return new Error('Log file \"' + proc.logFile + '\" does not exist.');\n  }\n\n  var tail = childProcess.spawn('tail', ['-f', '-n', 10, proc.logFile], {\n    killSignal: 'SIGTERM',\n    stdio     : [null, 'pipe', 'pipe']\n  });\n\n  // Use utf8 encoding.\n  tail.stdio.forEach(function(stdio){\n    stdio.setEncoding('utf8');\n  });\n\n  // stdout.\n  tail.stdout.on('data', function(data){\n    var lines = data.split(/\\n/);\n    lines = lines.filter(function(line){\n      return !/^[\\s\\r\\t]*$/.test(line);\n    });\n    if (lines.length > 0) {\n      cb(null, lines);\n    }\n  });\n\n  // handle error.\n  tail.stderr.on('data', function(data){\n    tail.disconnect();\n    cb(new Error(data.toString().replace(/\\n/, '')));\n  });\n  return tail;\n}\n","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/lib/util/router.js":"var _ = require('lodash'),\n  path = require('path'),\n  chalk = require('chalk'),\n  fs = require('fs'),\n  url = require('url');\n\nvar routes = []\n\n// bind actions.\nglobal.action = function (method, path, func) {\n  if (typeof method == 'function') {\n    func = method;\n    method = 'get';\n    path = func.name;\n  } else if (typeof path == 'function') {\n    func = path;\n    path = func.name;\n  }\n  if (typeof method != 'string' || typeof path != 'string' || typeof func != 'function') {\n    throw new Error('Arguments of action() should be one of `[FUNCTION]` / `[METHOD], [FUNCTION]` / `[METHOD], [PATH], [FUNCTION]`.')\n  }\n  routes.push({\n    method: method,\n    path: '/' + (!!~['index', 'home', 'main'].indexOf(__route_root) ? '':__route_root) + (path ? '/' + path : ''),\n    fn: func\n  });\n};\n\nvar _cwd = path.resolve(__dirname, '../../', 'web/routes');\n// initialize.\nmodule.exports = function (server, log) {\n  fs.readdirSync(_cwd).forEach(function (f) {\n    if(path.extname(f) != '.js'){\n      return;\n    }\n    global.__route_root = path.basename(f, '.js');\n    require(path.resolve(_cwd, f));\n    delete global.__route_root;\n  });\n  routes.forEach(function (route) {\n    log.i('hook', chalk.bold.green(route.method.toUpperCase()), chalk.underline.grey(route.path));\n    server[route.method](route.path, function(req, res, next){\n      req.log = log;\n      next();\n    }, route.fn);\n  });\n};","/home/travis/build/npmtest/node-npmtest-forever-web/node_modules/forever-web/web/routes/api.js":"action(function system(req, res){\n\n});"}